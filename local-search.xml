<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初识Vite</title>
    <link href="/2022/12/08/%E5%88%9D%E8%AF%86Vite/"/>
    <url>/2022/12/08/%E5%88%9D%E8%AF%86Vite/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm create vite@latest<br></code></pre></td></tr></table></figure><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm init vite@latest<br><br></code></pre></td></tr></table></figure><h1 id="Vite目录"><a href="#Vite目录" class="headerlink" title="Vite目录"></a>Vite目录</h1><ul><li><p>public 下面的不会被编译 可以存放静态资源</p></li><li><p>assets 下面可以存放可编译的静态资源</p></li><li><p>components 下面用来存放我们的组件</p></li><li><p>App.vue 是全局组件</p></li><li><p>main ts 全局的ts文件</p></li><li><p>index.html 非常重要的入口文件 （webpack，rollup 他们的入口文件都是enrty input 是一个js文件 而Vite 的入口文件是一个html文件，他刚开始不会编译这些js文件 只有当你用到的时候 如script src&#x3D;”xxxxx.js” 会发起一个请求被vite拦截这时候才会解析js文件）</p></li><li><p>vite config ts 这是vite的配置文件具体配置项 后面会详解</p></li></ul><h1 id="vue-cli-迁移-vite"><a href="#vue-cli-迁移-vite" class="headerlink" title="vue-cli 迁移 vite"></a>vue-cli 迁移 vite</h1><ul><li><p>先创建<code>vite</code>项目</p></li><li><p>将<code>src</code>文件夹和图片中内容进行替换</p><p><img src="/img/image_WjHptUVH3E.png"></p><ul><li><p>如果是<code>vue2</code> 项目 要单独修改配置文件</p><ul><li><p>安装插件 <code>vite-plugin-vue2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install vite-plugin-vue2<br></code></pre></td></tr></table></figure></li><li><p>在<code>vite.config.js</code> 中引入并修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-comment">// import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">const</span> &#123; createVuePlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vite-plugin-vue2&#x27;</span>)<br><br><span class="hljs-comment">// export default defineConfig(&#123;</span><br><span class="hljs-comment">//   plugins: [vue()]</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">createVuePlugin</span>(<span class="hljs-comment">/*options*/</span>)]<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>如果存在报错信息  按照报错信息进行修改</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vite</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识JSX</title>
    <link href="/2022/12/08/%E5%88%9D%E8%AF%86JSX/"/>
    <url>/2022/12/08/%E5%88%9D%E8%AF%86JSX/</url>
    
    <content type="html"><![CDATA[<h1 id="在JSX中嵌入表达式"><a href="#在JSX中嵌入表达式" class="headerlink" title="在JSX中嵌入表达式"></a>在JSX中嵌入表达式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">const name = &#x27;Josh Perez&#x27;;<br>const element = &lt;h1&gt;Hello, &#123;name&#125;&lt;/h1&gt;;<br></code></pre></td></tr></table></figure><blockquote><p>声明一个名为<code>name</code>的变量 ，并将它包裹在大括号中，大括号内可以放置任何有效的<code>JavaScript</code>表达式（函数也可以）</p></blockquote><h1 id="JSX也是一个表达式"><a href="#JSX也是一个表达式" class="headerlink" title="JSX也是一个表达式"></a>JSX也是一个表达式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">function getGreeting(user) &#123;<br>  if (user) &#123;<br>    return &lt;h1&gt;Hello, &#123;formatName(user)&#125;!&lt;/h1&gt;;<br>  &#125;<br>  return &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以在 <code>if</code> 语句和 <code>for</code> 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX</p></blockquote><h1 id="JSX中指定属性"><a href="#JSX中指定属性" class="headerlink" title="JSX中指定属性"></a>JSX中指定属性</h1><ul><li><p>可以通过使用引号，来将属性值指定为字符串字面量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">const element = &lt;a href=&quot;https://www.reactjs.org&quot;&gt; link &lt;/a&gt;;<br></code></pre></td></tr></table></figure></li><li><p>可以使用大括号，来在属性值中插入一个 JavaScript 表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">const element = &lt;img src=&#123;user.avatarUrl&#125;&gt;&lt;/img&gt;;<br></code></pre></td></tr></table></figure></li><li><p>在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号。你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号。</p></li><li><p>JSX 语法上更接近 JavaScript 而不是 HTML，使用小驼峰命名来定义属性的名称,例如<code>class </code>写成<code>className</code></p></li></ul><h1 id="使用JSX指定子元素"><a href="#使用JSX指定子元素" class="headerlink" title="使用JSX指定子元素"></a>使用JSX指定子元素</h1><ul><li><p>假如一个标签里面没有内容，你可以使用 <code>/&gt;</code> 来闭合标签，就像 XML 语法一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">const element = &lt;img src=&#123;user.avatarUrl&#125; /&gt;;<br></code></pre></td></tr></table></figure></li><li><p>JSX 标签里能够包含很多子元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">const element = (<br>  &lt;div&gt;<br>    &lt;h1&gt;Hello!&lt;/h1&gt;<br>    &lt;h2&gt;Good to see you here.&lt;/h2&gt;<br>  &lt;/div&gt;<br>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="JSX表示对象"><a href="#JSX表示对象" class="headerlink" title="JSX表示对象"></a>JSX表示对象</h1><ul><li><p>以下两种代码完全等效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">const element = (<br>  &lt;h1 className=&quot;greeting&quot;&gt;<br>    Hello, world!<br>  &lt;/h1&gt;<br>);<br><br>const element = React.createElement(<br>  &#x27;h1&#x27;,<br>  &#123;className: &#x27;greeting&#x27;&#125;,<br>  &#x27;Hello, world!&#x27;<br>);<br><br></code></pre></td></tr></table></figure></li><li><p><code>React.createElement()</code> 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs react&#x20;jsx">// 注意：这是简化过的结构<br>const element = &#123;<br>  type: &#x27;h1&#x27;,<br>  props: &#123;<br>    className: &#x27;greeting&#x27;,<br>    children: &#x27;Hello, world!&#x27;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>这些对象被称为 “<code>React 元素</code>”。它们描述了你希望在屏幕上看到的内容。React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>JSX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第九章 (computed计算属性)</title>
    <link href="/2022/12/08/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20(computed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7)/"/>
    <url>/2022/12/08/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20(computed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第八章 (to系列全家桶)</title>
    <link href="/2022/12/08/%E7%AC%AC%E5%85%AB%E7%AB%A0%20(to%E7%B3%BB%E5%88%97%E5%85%A8%E5%AE%B6%E6%A1%B6)/"/>
    <url>/2022/12/08/%E7%AC%AC%E5%85%AB%E7%AB%A0%20(to%E7%B3%BB%E5%88%97%E5%85%A8%E5%AE%B6%E6%A1%B6)/</url>
    
    <content type="html"><![CDATA[<h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h1><ul><li><p>只能修改响应式对象的值 可用于单独提出来响应式对象的某个值 （比如解构响应式对象的属性方便使用）</p></li><li><p>非响应式对象视图毫无变化 打印有变化 一般非响应式对象不用这个 毫无作用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123;  obj  &#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;obj1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; toRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> obj = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">foo</span>: <span class="hljs-number">111</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">bar</span>: <span class="hljs-number">222</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> obj1 = <span class="hljs-title function_">toRef</span>(obj,<span class="hljs-string">&#x27;foo&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">change</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  obj1.<span class="hljs-property">value</span> =<span class="hljs-number">444</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj,obj1);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>源码实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//如果是ref 对象直接返回 否则 调用  ObjectRefImpl 创建一个类ref 对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> toRef&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span>, K <span class="hljs-keyword">extends</span> keyof T&gt;(<br>  <span class="hljs-attr">object</span>: T,<br>  <span class="hljs-attr">key</span>: K,<br>  defaultValue?: T[K]<br>): <span class="hljs-title class_">ToRef</span>&lt;T[K]&gt; &#123;<br>  <span class="hljs-keyword">const</span> val = <span class="hljs-built_in">object</span>[key]<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">isRef</span>(val)<br>    ? val<br>    : (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectRefImpl</span>(<span class="hljs-built_in">object</span>, key, defaultValue) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)<br>&#125;<br><span class="hljs-comment">//类ref 对象只是做了值的改变 并未处理 收集依赖 和 触发依赖的过程 所以 普通对象无法更新视图</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectRefImpl</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span>, K <span class="hljs-keyword">extends</span> keyof T&gt; &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> __v_isRef = <span class="hljs-literal">true</span><br> <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> _object: T,</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> _key: K,</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> _defaultValue?: T[K]</span><br><span class="hljs-params">  </span>) &#123;&#125;<br> <br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>    <span class="hljs-keyword">const</span> val = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_object</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">_key</span>]<br>    <span class="hljs-keyword">return</span> val === <span class="hljs-literal">undefined</span> ? (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_defaultValue</span> <span class="hljs-keyword">as</span> T[K]) : val<br>  &#125;<br> <br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newVal</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_object</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">_key</span>] = newVal<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h1><ul><li><p>可以帮我们批量创建ref对象主要是方便我们解构使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//实际使用</span><br><span class="hljs-keyword">import</span> &#123; toRefs,reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br> <span class="hljs-keyword">const</span> snow = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;wax&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;24&#x27;</span>&#125;)<br> <span class="hljs-keyword">let</span> &#123;name,age&#125; = <span class="hljs-title function_">toRefs</span>(snow)<br> <span class="hljs-comment">//解构出来的属性具有响应式 不然只是字符串 视图不会更新</span><br> name.<span class="hljs-property">age</span>=<span class="hljs-string">&#x27;18&#x27;</span> <br> <br><br></code></pre></td></tr></table></figure></li><li><p>源码实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 手写 通过toRef 使每一个属性变成响应式对象 方便视图更新</span><br><span class="hljs-keyword">const</span> toRefs = &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span>&gt;<span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">object</span>:T</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">map</span>:<span class="hljs-built_in">any</span> = &#123;&#125;<br>  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">object</span>)&#123;<br>    map[key] = <span class="hljs-title function_">toRef</span>(<span class="hljs-built_in">object</span>,key)<br>  &#125;<br>  <span class="hljs-keyword">return</span> map<br>&#125;<br><span class="hljs-comment">//原始</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ToRefs</span>&lt;T = <span class="hljs-built_in">any</span>&gt; = &#123;<br>  [K <span class="hljs-keyword">in</span> keyof T]: <span class="hljs-title class_">ToRef</span>&lt;T[K]&gt;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> toRefs&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">object</span>&gt;(<span class="hljs-attr">object</span>: T): <span class="hljs-title class_">ToRefs</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; !<span class="hljs-title function_">isProxy</span>(<span class="hljs-built_in">object</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`toRefs() expects a reactive object but received a plain one.`</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">ret</span>: <span class="hljs-built_in">any</span> = <span class="hljs-title function_">isArray</span>(<span class="hljs-built_in">object</span>) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">length</span>) : &#123;&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">object</span>) &#123;<br>    ret[key] = <span class="hljs-title function_">toRef</span>(<span class="hljs-built_in">object</span>, key)<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h1><ul><li><p>将响应式对象转化为普通对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; reactive, toRaw &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123;<br>   <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>   <span class="hljs-attr">bar</span>: <span class="hljs-number">1</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">toRaw</span>(obj)<br><span class="hljs-comment">// 响应式对象转化为普通对象</span><br> <br><span class="hljs-keyword">const</span> <span class="hljs-title function_">change</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj, state);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>源码实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 手写 取这个属性值就可以获取</span><br>obj[<span class="hljs-string">&#x27;__v_raw&#x27;</span>] <br><br><span class="hljs-comment">//原始</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ReactiveFlags</span> &#123;<br>  <span class="hljs-variable constant_">SKIP</span> = <span class="hljs-string">&#x27;__v_skip&#x27;</span>,<br>  <span class="hljs-variable constant_">IS_REACTIVE</span> = <span class="hljs-string">&#x27;__v_isReactive&#x27;</span>,<br>  <span class="hljs-variable constant_">IS_READONLY</span> = <span class="hljs-string">&#x27;__v_isReadonly&#x27;</span>,<br>  <span class="hljs-variable constant_">IS_SHALLOW</span> = <span class="hljs-string">&#x27;__v_isShallow&#x27;</span>,<br>  <span class="hljs-variable constant_">RAW</span> = <span class="hljs-string">&#x27;__v_raw&#x27;</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> toRaw&lt;T&gt;(<span class="hljs-attr">observed</span>: T): T &#123;<br>  <span class="hljs-keyword">const</span> raw = observed &amp;&amp; (observed <span class="hljs-keyword">as</span> <span class="hljs-title class_">Target</span>)[<span class="hljs-title class_">ReactiveFlags</span>.<span class="hljs-property">RAW</span>]<br>  <span class="hljs-keyword">return</span> raw ? <span class="hljs-title function_">toRaw</span>(raw) : observed<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第七章 (Reactive全家桶)</title>
    <link href="/2022/12/08/%E7%AC%AC%E4%B8%83%E7%AB%A0%20(Reactive%E5%85%A8%E5%AE%B6%E6%A1%B6)/"/>
    <url>/2022/12/08/%E7%AC%AC%E4%B8%83%E7%AB%A0%20(Reactive%E5%85%A8%E5%AE%B6%E6%A1%B6)/</url>
    
    <content type="html"><![CDATA[<h1 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h1><ul><li><p>用来绑定复杂的数据类型 ( array,object ) ,使用时无需 <code>.value</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">reactive</span>([])<br><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;wax&quot;</span><br>&#125;)<br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;snow&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>数组异步赋值问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//直接赋值页面是不会变化的因为会脱离响应式</span><br><span class="hljs-keyword">let</span> person = reactive&lt;<span class="hljs-built_in">number</span>[]&gt;([])<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  person = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br>&#125;,<span class="hljs-number">1000</span>)<br><br></code></pre></td></tr></table></figure><ul><li><p>使用push</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">let</span> person = reactive&lt;<span class="hljs-built_in">number</span>[]&gt;([])<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>  person.<span class="hljs-title function_">push</span>(...arr)<span class="hljs-comment">//解构出来</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure></li><li><p>包裹一层对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Person</span> = &#123;<br>  list?:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;<br>&#125;<br><span class="hljs-keyword">let</span> person = reactive&lt;<span class="hljs-title class_">Person</span>&gt;(&#123;<br>   <span class="hljs-attr">list</span>:[]<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>  person.<span class="hljs-property">list</span> = arr;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h1><ul><li><p>拷贝一份proxy对象将其设置为只读</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; reactive ,<span class="hljs-keyword">readonly</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> person = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">count</span>:<span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">//拷贝一份</span><br><span class="hljs-keyword">const</span> copy = <span class="hljs-title function_">readonly</span>(person)<br><span class="hljs-comment">//只读 不允许更改</span><br>copy.<span class="hljs-property">count</span>++<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h1><ul><li><p>只能对浅层的数据 如果是深层的数据只会改变值 不会改变视图</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; state &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change1&quot;</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change2&quot;</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br> <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; shallowReactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">shallowReactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//这一层的值可以改变</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">first</span>: &#123; <span class="hljs-comment">//这一层的值 log中看到已经改变 但是页面没有变化</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">second</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">c</span>: <span class="hljs-number">3</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">change1</span>=(<span class="hljs-params"></span>)=&gt;&#123;</span></span><br><span class="language-javascript"><span class="language-xml"> state.<span class="hljs-property">a</span> = <span class="hljs-number">7</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">change2</span>=(<span class="hljs-params"></span>)=&gt;&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  state.<span class="hljs-property">first</span>.<span class="hljs-property">b</span> = <span class="hljs-number">8</span></span></span><br><span class="language-javascript"><span class="language-xml">  state.<span class="hljs-property">first</span>.<span class="hljs-property">second</span>.<span class="hljs-property">c</span> = <span class="hljs-number">9</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六章 (Ref全家桶)</title>
    <link href="/2022/12/08/%E7%AC%AC%E5%85%AD%E7%AB%A0%20(Ref%E5%85%A8%E5%AE%B6%E6%A1%B6)/"/>
    <url>/2022/12/08/%E7%AC%AC%E5%85%AD%E7%AB%A0%20(Ref%E5%85%A8%E5%AE%B6%E6%A1%B6)/</url>
    
    <content type="html"><![CDATA[<h1 id="第六章-Ref全家桶"><a href="#第六章-Ref全家桶" class="headerlink" title="第六章 (Ref全家桶)"></a>第六章 (Ref全家桶)</h1><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul><li><p>使简单数据类型的数据变成响应式数据，接收一个内部值并返回一个可变的ref对象，js中使用<code>.value</code>获取值，html中直接使用即可</p></li><li><p>不指定类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">let</span> message = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;wax&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>指定类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">let</span> message = ref&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;wax&quot;</span>)<br><br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">import</span> &#123; ref,<span class="hljs-title class_">Ref</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">message</span>:<span class="hljs-title class_">Ref</span>&lt;<span class="hljs-built_in">string</span>&gt;= <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;wax&quot;</span>)<br><br><span class="hljs-comment">//使用值 </span><br><span class="hljs-comment">//js代码中需要.value获取</span><br>message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;snow&#x27;</span><br><span class="hljs-comment">//html代码中 直接使用message即可</span><br></code></pre></td></tr></table></figure></li><li><p>单个ref实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;p ref=<span class="hljs-string">&quot;desc&quot;</span>&gt;&lt;/p&gt;<br><br><span class="hljs-comment">//使用元素引用 定义相同名称变量为空</span><br><span class="hljs-keyword">const</span> desc = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-comment">//侦听器 当counter变化时 操作ref为desc的实例变化</span><br><span class="hljs-title function_">watch</span>(counter, <span class="hljs-function">(<span class="hljs-params">val, oldVal</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> p = desc.<span class="hljs-property">value</span>;<span class="hljs-comment">//dom元素</span><br>  p.<span class="hljs-property">textContent</span> = <span class="hljs-string">`counter change from <span class="hljs-subst">$&#123;oldVal&#125;</span> to <span class="hljs-subst">$&#123;val&#125;</span>`</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><code>v-for</code> 中的<code>ref</code>数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in list&quot;</span> :ref=<span class="hljs-string">&quot;setItemRef&quot;</span>&gt;&lt;<span class="hljs-regexp">/div&gt;/</span><span class="hljs-regexp">/为了不同的div有不同的ref</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">import &#123; onBeforeUpdate, onUpdated &#125; from &#x27;vue&#x27;</span><br><span class="hljs-regexp">export default &#123;</span><br><span class="hljs-regexp">  setup() &#123;</span><br><span class="hljs-regexp">    let itemRefs = []</span><br><span class="hljs-regexp">    const setItemRef = el =&gt; &#123;</span><br><span class="hljs-regexp">      if (el) &#123;</span><br><span class="hljs-regexp">        itemRefs.push(el)</span><br><span class="hljs-regexp">      &#125;</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">    onBeforeUpdate(() =&gt; &#123;</span><br><span class="hljs-regexp">      itemRefs = []</span><br><span class="hljs-regexp">    &#125;)</span><br><span class="hljs-regexp">    onUpdated(() =&gt; &#123;</span><br><span class="hljs-regexp">      console.log(itemRefs)</span><br><span class="hljs-regexp">    &#125;)</span><br><span class="hljs-regexp">    return &#123;</span><br><span class="hljs-regexp">      setItemRef</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">  &#125;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>itemRefs</code> 不必是数组：它也可以是一个对象，其 <code>ref</code> 可以通过迭代的 <code>key</code> 被设置。</p></li><li><p>如有需要，<code>itemRefs</code> 也可以是响应式的，且可以被侦听。</p></li></ul></li></ul><h1 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h1><ul><li><p>判断是否为ref对象 是返回true 不是返回false</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; ref,isRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">let</span> message = ref&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&quot;wax&quot;</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-attr">notRef</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isRef</span>(message))<span class="hljs-comment">//返回true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isRef</span>(notRef))<span class="hljs-comment">//返回false</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a>shallowRef</h1><ul><li><p>创建一个跟踪自身<code>.value</code>变化的ref ，<code>.value</code> 是响应式的，但是<code>.value</code> 内的值不是响应式的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; shallowRef,triggerRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">let</span> message = <span class="hljs-title function_">shallowRef</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wax&#x27;</span><br>&#125;)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">changeMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    message.<span class="hljs-property">value</span> = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;snow&#x27;</span><br>    &#125;<span class="hljs-comment">//这是响应式的</span><br>    <br>    message.<span class="hljs-property">value</span>.<span class="hljs-property">name</span> =<span class="hljs-string">&#x27;snow&#x27;</span><span class="hljs-comment">//这不是响应式的</span><br>    <span class="hljs-title function_">triggerRef</span>(message)<span class="hljs-comment">//强制更新后变成响应式</span><br>    <br>    <span class="hljs-comment">//另一种响应式方式为 同时使用一个ref变量 ref更新时 shallowRef也会跟着更新</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h1><ul><li>可以强制更新页面dom 可以配合shallowRef使用</li></ul><h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h1><ul><li><p>自定义ref 需要自己自定义函数，可实现响应式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; customRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title class_">MyRef</span>&lt;T&gt;(<span class="hljs-attr">value</span>: T) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">customRef</span>(<span class="hljs-function">(<span class="hljs-params">trank, trigger</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-title function_">trank</span>()<span class="hljs-comment">//收集依赖</span><br>                <span class="hljs-keyword">return</span> value<br>            &#125;,<br>            <span class="hljs-title function_">set</span>(<span class="hljs-params">newVal: T</span>) &#123;<br>                value = newVal<span class="hljs-comment">//赋新值</span><br>                <span class="hljs-title function_">trigger</span>()<span class="hljs-comment">//更新</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">let</span> message = <span class="hljs-title class_">MyRef</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;wax&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">changeMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    message.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;snow&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五章 (虚拟Dom和Diff算法)</title>
    <link href="/2022/12/08/%E7%AC%AC%E4%BA%94%E7%AB%A0%20(%E8%99%9A%E6%8B%9FDom%E5%92%8CDiff%E7%AE%97%E6%B3%95)/"/>
    <url>/2022/12/08/%E7%AC%AC%E4%BA%94%E7%AB%A0%20(%E8%99%9A%E6%8B%9FDom%E5%92%8CDiff%E7%AE%97%E6%B3%95)/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟Dom（VNode）"><a href="#虚拟Dom（VNode）" class="headerlink" title="虚拟Dom（VNode）"></a>虚拟Dom（VNode）</h1><ul><li><p>虚拟dom就是通过js来生成一个节点树</p></li><li><p>因为dom上的属性是非常多的，直接操作dom非常浪费性能</p></li><li><p>但是可以通过js的计算性能来替代，操作js是非常快的</p></li></ul><h1 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h1><p><img src="/img/image_owaq6wdx_r.png"></p><ul><li>为了避免多次比对浪费性能，优化了比对的方案</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章 (模板语法 &amp; vue指令)</title>
    <link href="/2022/12/08/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20(%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%20&amp;%20vue%E6%8C%87%E4%BB%A4)/"/>
    <url>/2022/12/08/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20(%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%20&amp;%20vue%E6%8C%87%E4%BB%A4)/</url>
    
    <content type="html"><![CDATA[<h1 id="模板插值语法"><a href="#模板插值语法" class="headerlink" title="模板插值语法"></a>模板插值语法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="hljs-comment">//显示变量</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message == 0 ? &#x27;我是小满0&#x27; : &#x27;我不是小满other&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="hljs-comment">//条件运算</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message  + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="hljs-comment">//运算</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message.split(&#x27;，&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="hljs-comment">//操作API</span><br>&lt;/template&gt;<br> <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> message = <span class="hljs-string">&quot;我是小满&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1><ul><li><p><code>v-</code> 开头的都是vue的指令</p></li><li><p><code>v-text</code> 用来显示文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">message</span>: string = <span class="hljs-string">&#x27;snowax&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p><code>v-html</code> 用来展示富文本（html标签）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">message</span>: string = <span class="hljs-string">&#x27;&lt;div&gt;snowaxs&lt;/div&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li><li><p><code>v-if</code> <code>v-else-if</code>  <code>v-else</code>  <code>v-show</code> <code>v-for</code> <code>v-model</code>&amp;#x20;</p></li><li><p><code>v-on</code> 简写@ 用来给元素添加事件</p><ul><li><p>v-on修饰符&amp;#x20;</p><ul><li><p>阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>阻止表单提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>v-bind </code>简写<code>: </code>用来绑定元素的属性Attr 表示动态属性</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章 (Vite &amp; npm run dev 详解）</title>
    <link href="/2022/12/08/%E7%AC%AC%E4%B8%89%E7%AB%A0%20(Vite%20&amp;%20npm%20run%20dev%20%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
    <url>/2022/12/08/%E7%AC%AC%E4%B8%89%E7%AB%A0%20(Vite%20&amp;%20npm%20run%20dev%20%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm create vite@latest<br></code></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm init vite@latest<br><br></code></pre></td></tr></table></figure><h2 id="Vite目录"><a href="#Vite目录" class="headerlink" title="Vite目录"></a>Vite目录</h2><ul><li><p>public 下面的不会被编译 可以存放静态资源</p></li><li><p>assets 下面可以存放可编译的静态资源</p></li><li><p>components 下面用来存放我们的组件</p></li><li><p>App.vue 是全局组件</p></li><li><p>main ts 全局的ts文件</p></li><li><p>index.html 非常重要的入口文件 （webpack，rollup 他们的入口文件都是enrty input 是一个js文件 而Vite 的入口文件是一个html文件，他刚开始不会编译这些js文件 只有当你用到的时候 如script src&#x3D;”xxxxx.js” 会发起一个请求被vite拦截这时候才会解析js文件）</p></li><li><p>vite config ts 这是vite的配置文件具体配置项 后面会详解</p></li></ul><h2 id="vue-cli-迁移-vite"><a href="#vue-cli-迁移-vite" class="headerlink" title="vue-cli 迁移 vite"></a>vue-cli 迁移 vite</h2><ul><li><p>先创建<code>vite</code>项目</p></li><li><p>将<code>src</code>文件夹和图片中内容进行替换</p><p><img src="/img/image_6K7TEGE8_j.png"></p><ul><li><p>如果是<code>vue2</code> 项目 要单独修改配置文件</p><ul><li><p>安装插件 <code>vite-plugin-vue2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install vite-plugin-vue2<br></code></pre></td></tr></table></figure></li><li><p>在<code>vite.config.js</code> 中引入并修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-comment">// import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">const</span> &#123; createVuePlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vite-plugin-vue2&#x27;</span>)<br><br><span class="hljs-comment">// export default defineConfig(&#123;</span><br><span class="hljs-comment">//   plugins: [vue()]</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">createVuePlugin</span>(<span class="hljs-comment">/*options*/</span>)]<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>如果存在报错信息  按照报错信息进行修改</p></li></ul><h1 id="npm-run-dev详解"><a href="#npm-run-dev详解" class="headerlink" title="npm run dev详解"></a>npm run dev详解</h1><ul><li><p>在我们执行这个命令的时候会去找 package json 的scripts 然后执行对应的dev命令</p><p><img src="/img/image_Rp3f57qul_.png"></p></li><li><p>那为什么不直接执行vite命令不是更方便吗？ — 因为电脑上并没有配置过相关命令，所以无法直接执行</p><p><img src="/img/image_YDp0Gmq4t1.png"></p></li><li><p>那为什么执行dev就可以表示执行了vite命令呢？— 使用了一种软连接的技术</p><ul><li><p>执行npm install 的时候（包含vite） 会在node_modules&#x2F;.bin&#x2F; 创建好可执行文件<code>.bin</code>目录，这个目录不是任何一个 npm 包。目录下的文件，表示这是一个个软链接，打开文件可以看到文件顶部写着 <code>#!/bin/sh</code> ，表示这是一个脚本</p><p><img src="/img/image_1DhwvqIIg-.png"></p><p><img src="/img/image_uTwO72oxl8.png"></p></li><li><p>在我们执行npm run xxx  npm 会通过软连接 查找这个软连接存在于源码目录node_modules&#x2F;vite</p><p><img src="/img/image_Og6-cdGf9I.png"></p></li><li><p>所以npm run xxx 的时候，就会到 node_modules&#x2F;bin中找对应的映射文件，然后再找到相应的js文件来执行</p><ul><li><p>查找规则</p><ul><li><p>先从当前项目的node_modlue &#x2F;bin去找</p></li><li><p>找不到去全局的node_module&#x2F;bin 去找</p></li><li><p>再找不到 去环境变量去找</p></li></ul></li></ul></li><li><p>node_modules&#x2F;bin中 有三个vite文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># unix <span class="hljs-title class_">Linux</span> macOS 系默认的可执行文件，必须输入完整文件名<br>vite<br> <br># windows cmd 中默认的可执行文件，当我们不添加后缀名时，自动根据 pathext 查找文件<br>vite.<span class="hljs-property">cmd</span><br> <br># <span class="hljs-title class_">Windows</span> <span class="hljs-title class_">PowerShell</span> 中可执行文件，可以跨平台<br>vite.<span class="hljs-property">ps1</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>总的来说就是 执行 npm run dev 时，会根据dev所对应的 <code>&#39;vite&#39;</code> 去查找所对应的软连接地址 然后执行该地址下的脚本文件</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章 (Nvm Nrm 使用教程）</title>
    <link href="/2022/12/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20(Nvm%20Nrm%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%89/"/>
    <url>/2022/12/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20(Nvm%20Nrm%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Nvm介绍"><a href="#Nvm介绍" class="headerlink" title="Nvm介绍"></a>Nvm介绍</h1><p>NVM 是专门针对node版本进行管理的工具，通过它可以安装和切换不同版本的node.js</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><ul><li><p><strong>卸载之前的nodejs版本</strong>：找的自己安装nodejs的文件夹，删掉整个nodejs文件夹即可，然后打开设置卸载nodejs软件</p></li><li><p><strong>nvm官网进行下载</strong>：下载nvm-setup.exe软件，或者nvm-setup.zip文件进行解压</p></li><li><p><strong>安装nvm，接受协议；</strong>自定义安装nvm路径，自定义安装nodejs路径(自定义安装路径之后查看一下环境变量看看是否新增了两个新的环境变量，其路径为自定义的nvm路径和nodejs路径)</p></li><li><p><strong>检查是否安装成功</strong>：nvm -v</p></li></ul><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li><p><code>nvm list</code>  查看本地node版本及目前使用node版本 （带星号）</p></li><li><p><code>nvm list available</code> 查看nodejs 官方的所有版本（推荐使用LTS列）</p><ul><li><p>若出现Could not retrieve <a href="https://nodejs.org/dist/index.json" title="https://nodejs.org/dist/index.json">https://nodejs.org/dist/index.json</a>. Get。。。。报错时，可找到nvm安装路径下的setting.txt文件夹下指定node和npm的mirror。输入：</p><ul><li><p>node_mirror: <a href="http://npm.taobao.org/mirrors/node/" title="npm.taobao.org/mirrors/node/">npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</a></p></li><li><p>npm_mirror: <a href="http://npm.taobao.org/mirrors/npm/" title="npm.taobao.org/mirrors/npm/">npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</a></p></li></ul><p>如果没有就新建一个</p></li></ul></li><li><p><code>nvm install (版本号)</code>下载对应的node版本号</p></li><li><p><code>nvm use (版本号)</code> 切换node版本</p></li></ul><h1 id="Nrm介绍"><a href="#Nrm介绍" class="headerlink" title="Nrm介绍"></a>Nrm介绍</h1><p>nrm 是一个 npm 源管理器，允许你快速地在 npm源间切换</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g nrm<br></code></pre></td></tr></table></figure><h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li><p><code>npm ls</code> 查看可选源 星号代表当前使用源</p></li><li><p><code>nrm use (源)</code>切换源</p></li><li><p><code>nrm add (名称) (源)</code> 新增其他源</p></li><li><p><code>nrm test npm</code> 测试源速度</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 (介绍）</title>
    <link href="/2022/12/07/%E7%AC%AC%E4%B8%80%E7%AB%A0%20(%E4%BB%8B%E7%BB%8D)/"/>
    <url>/2022/12/07/%E7%AC%AC%E4%B8%80%E7%AB%A0%20(%E4%BB%8B%E7%BB%8D)/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍Vue"><a href="#介绍Vue" class="headerlink" title="介绍Vue"></a>介绍Vue</h1><ul><li><p>一种渐进式框架（会一点写一点，一点一点向上走），更容易上手</p></li><li><p>采用MVVM（Model-View-ViewModel）架构</p><ul><li><p>View : 视图层</p></li><li><p>Model : 数据层</p></li><li><p>ViewModel : 业务逻辑层，数据和视图的桥梁</p></li></ul><p><img src="/img/image_VAxorzZVvS.png"></p></li></ul><h1 id="Vue2-对比-Vue3"><a href="#Vue2-对比-Vue3" class="headerlink" title="Vue2 对比 Vue3"></a>Vue2 对比 Vue3</h1><h2 id="Api形式"><a href="#Api形式" class="headerlink" title="Api形式"></a>Api形式</h2><ul><li><p>vue2 : <strong>Options Api</strong> （选项式api）逻辑比较分散 可读性差 可维护性差</p></li><li><p>vue3 : <strong>Composition Api</strong>（组合式api） 逻辑分明 可维护性高</p></li></ul><h2 id="重写双向数据绑定"><a href="#重写双向数据绑定" class="headerlink" title="重写双向数据绑定"></a>重写双向数据绑定</h2><ul><li><p>vue2 : 双向数据绑定是采用<strong>发布-订阅模式</strong>，结合<strong>Object.defineProperty(obj, prop, desc)</strong> 对数据进行相应的劫持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(object,<span class="hljs-string">&#x27;msg&#x27;</span>,&#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> object&#125;,  <br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">value</span> = value<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;content&#x27;</span>).<span class="hljs-property">innerHTML</span> = value<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>vue3 : 基于<strong>Proxy</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> proxyObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj,&#123;<br>        get : <span class="hljs-keyword">function</span> (<span class="hljs-params">target,prop</span>) &#123;<br>            <span class="hljs-keyword">return</span> prop <span class="hljs-keyword">in</span> target ? target[prop] : <span class="hljs-number">0</span><br>        &#125;,<br>        set : <span class="hljs-keyword">function</span> (<span class="hljs-params">target,prop,value</span>) &#123;<br>            target[prop] = <span class="hljs-number">888</span>;<span class="hljs-comment">//prop是对象的key 会自动返回 不必for in 获取</span><br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure></li><li><p>优势：</p><ul><li><p>省去for in 循环来获取key值</p></li><li><p>代码更简化</p></li><li><p>可以监听数组变化</p></li><li><p>可以监听动态新增和删除的属性&amp;#x20;</p></li><li><p>可以监听数组的索引和 length 属性</p></li></ul></li></ul><h2 id="优化了Vdom"><a href="#优化了Vdom" class="headerlink" title="优化了Vdom"></a>优化了Vdom</h2><ul><li><p>vue2：每次更新<code>diff</code> 都是全量对比</p></li><li><p>vue3：只对比带有标记的，这样就大大减少了非动态内容的消耗</p><ul><li><p>patch flag 优化静态树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//编译前</span><br>&lt;span&gt;<span class="hljs-title class_">Hello</span> world!&lt;/span&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;/span&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello world! <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br><span class="hljs-comment">//编译后</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">_ctx，_cache，$props，$setup，$data，$options</span>)&#123;<span class="hljs-keyword">return</span> (<span class="hljs-title function_">_openBlock</span>(),<span class="hljs-title function_">_createBlock</span>(_Fragment,<span class="hljs-literal">null</span>，[<br><span class="hljs-title function_">_createvNode</span>( <span class="hljs-string">&quot;span&quot;</span>, <span class="hljs-literal">null</span>,<span class="hljs-string">&quot;Hello world ! &quot;</span>),<br><span class="hljs-title function_">_createvNode</span>( <span class="hljs-string">&quot;span&quot;</span>,<span class="hljs-literal">null</span>，<span class="hljs-string">&quot;Hello world! &quot;</span>),<br><span class="hljs-title function_">_createvNode</span>( <span class="hljs-string">&quot;span&quot;</span>，<span class="hljs-literal">null</span>，<span class="hljs-string">&quot;Hello world! &quot;</span>),<br><span class="hljs-title function_">_createvNode</span>( <span class="hljs-string">&quot;span&quot;</span>, <span class="hljs-literal">null</span>，<span class="hljs-string">&quot;Hello world! &quot;</span>),<br><span class="hljs-title function_">_createVNode</span>(<span class="hljs-string">&quot;span&quot;</span>, <span class="hljs-literal">null</span>，<span class="hljs-title function_">_toDisplaystring</span>(_ctx.<span class="hljs-property">msg</span>)，<span class="hljs-number">1</span><span class="hljs-comment">/* TEXT */</span>)，<br><span class="hljs-title function_">_createvNode</span>( <span class="hljs-string">&quot;span&quot;</span>, <span class="hljs-literal">null</span>，<span class="hljs-string">&quot;Hello world! &quot;</span>),<br><span class="hljs-title function_">_createvNode</span>( <span class="hljs-string">&quot;span&quot;</span>, <span class="hljs-literal">null</span>，<span class="hljs-string">&quot;Hello world! &quot;</span>)]，<span class="hljs-number">64</span><span class="hljs-comment">/*STABLE_FRAGMENT */</span>))<br><br></code></pre></td></tr></table></figure><ul><li><p>新增了 patch flag 标记</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">TEXT</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// 动态文本节点</span><br><span class="hljs-variable constant_">CLASS</span>=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-comment">// 2//动态class</span><br><span class="hljs-variable constant_">STYLE</span>=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">2</span>，<span class="hljs-comment">// 4 //动态style</span><br><span class="hljs-variable constant_">PROPS</span>=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">3</span>,<span class="hljs-comment">// 8 //动态属性，但不包含类名和样式</span><br><span class="hljs-title class_">FULLPR0PS</span>=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">4</span>,<span class="hljs-comment">// 16 //具有动态key属性，当key改变时，需要进行完整的diff比较。</span><br><span class="hljs-variable constant_">HYDRATE_</span> <span class="hljs-variable constant_">EVENTS</span> = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>，<span class="hljs-comment">// 32 //带有监听事件的节点</span><br><span class="hljs-variable constant_">STABLE</span> <span class="hljs-variable constant_">FRAGMENT</span> = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>, <span class="hljs-comment">// 64 //一个不会改变子节点顺序的fragment</span><br><span class="hljs-variable constant_">KEYED_</span> <span class="hljs-variable constant_">FRAGMENT</span> = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>, <span class="hljs-comment">// 128 //带有key属性的fragment 或部分子字节有key</span><br><span class="hljs-variable constant_">UNKEYED</span> <span class="hljs-variable constant_">FRAGMENT</span> = <span class="hljs-number">1</span>&lt;&lt; <span class="hljs-number">8</span>, <span class="hljs-comment">// 256 //子节点没有key 的fragment</span><br><span class="hljs-variable constant_">NEED</span> <span class="hljs-variable constant_">PATCH</span> = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>, <span class="hljs-comment">// 512 //一个节点只会进行非props比较</span><br><span class="hljs-variable constant_">DYNAMIC_SLOTS</span> = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span> <span class="hljs-comment">// 1024 // 动态slot</span><br><span class="hljs-variable constant_">HOISTED</span> = -<span class="hljs-number">1</span> <span class="hljs-comment">// 静态节点</span><br><span class="hljs-variable constant_">BALL</span> = -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>结论</p><ul><li><p>在创建动态dom元素的时候，Vdom除了模拟出了基本信息意外，还给他加了一个标记    1 &#x2F;* TEXT *&#x2F;   ，这个标记叫patch flag（补丁标记），</p></li><li><p>强大之处在于当diff算法走到 _createBlock 函数的时候，会忽略所有的静态节点，只对有标记的动态节点进行对比，而且在多层的嵌套下依然有效。</p></li><li><p>尽管 JavaScript 做 Vdom 的对比已经非常的快，但是 patch flag 的出现还是让 Vue3 的 Vdom 的性能得到了很大的提升，尤其是在针对大组件的时候</p></li></ul></li></ul></li></ul><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul><li><p>允许支持多个根节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>支持render JSX写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                &#123;this.visable ? (</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;this.obj.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                ) : (</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;this.obj.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                )&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#123;this.val&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="language-xml">                &#123;[1, 2, 3].map((v) =&gt; &#123;</span><br><span class="language-xml">                   return <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;v&#125;-----<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;</span><br><span class="language-xml">                &#125;)&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        );<br>    &#125;,<br> <br></code></pre></td></tr></table></figure></li></ul><h2 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree shaking"></a>Tree shaking</h2><p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p><h2 id="Composition-Api"><a href="#Composition-Api" class="headerlink" title="Composition Api"></a>Composition Api</h2><p>Setup 函数式编程 也叫vue Hook</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-beautiful-dnd 拖拽功能</title>
    <link href="/2022/12/07/react-beautiful-dnd%20%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/12/07/react-beautiful-dnd%20%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="github-地址"><a href="#github-地址" class="headerlink" title="github 地址"></a>github 地址</h2><p><a href="https://github.com/atlassian/react-beautiful-dnd">https://github.com/atlassian/react-beautiful-dnd</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i react-beautiful-dnd<br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs bash">const getMetaListStyle = (isDragging: any) =&gt; (&#123;<br>        padding: grid,<br>        display: <span class="hljs-string">&#x27;flex&#x27;</span>,<br>        flexWrap: <span class="hljs-string">&#x27;wrap&#x27;</span>,<br>        backgroundColor: isDragging ? <span class="hljs-string">&#x27;#ffebe6&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;);<br>    const getMetaListStyles = (isDragging: any) =&gt; (&#123;<br>        padding: grid,<br>        display: <span class="hljs-string">&#x27;flex&#x27;</span>,<br>        flexWrap: <span class="hljs-string">&#x27;wrap&#x27;</span>,<br>        backgroundColor: isDragging ? <span class="hljs-string">&#x27;#e6fcff&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;);<br>    const getMetaItemStyle = (isDragging: any, draggableStyle: any) =&gt; (&#123;<br>        userSelect: <span class="hljs-string">&#x27;none&#x27;</span>,<br>        margin: `0 <span class="hljs-variable">$&#123;grid&#125;</span>px 4px 0`,<br>        padding: `<span class="hljs-variable">$&#123;grid&#125;</span>px`,<br>        border: isDragging ? <span class="hljs-string">&#x27;2px solid #475a79&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>,<br>        backgroundColor: isDragging ? <span class="hljs-string">&#x27;#deebff&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>,<br>        // width: <span class="hljs-string">&#x27;260px&#x27;</span>,<br>        // opacity: isDragging ? <span class="hljs-string">&#x27;1&#x27;</span> : <span class="hljs-string">&#x27;0&#x27;</span>,<br>        cursor: <span class="hljs-string">&#x27;move&#x27;</span>,<br>        textAlign: <span class="hljs-string">&#x27;center&#x27;</span>,<br>        minWidth: <span class="hljs-string">&#x27;100px&#x27;</span>,<br>        ...draggableStyle,<br>    &#125;);<br><br>// 在拖动结束时<br>    const onDragEnd = (result: any) =&gt; &#123;<br>        //source从哪里开始拖拽 destination拖拽到哪里<br>        const &#123; <span class="hljs-built_in">source</span>, destination, draggableId &#125; = result;<br><br>        console.log(result);<br><br>        // <span class="hljs-built_in">return</span><br>        //若没有拖拽到指定地点 就退出拖拽事件<br>        <span class="hljs-keyword">if</span> (!destination) &#123;<br>            <span class="hljs-built_in">return</span>;<br>        &#125;<br>        //禁止在全部应用中拖拽<br>        <span class="hljs-keyword">if</span> (destination.droppableId == <span class="hljs-string">&quot;全部应用&quot;</span>) &#123;<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        console.log(<span class="hljs-string">&#x27;data&#x27;</span>, data);<br><br>        <span class="hljs-keyword">if</span> (data.filter((item) =&gt; item.id == draggableId).length != <span class="hljs-number">0</span>) &#123;<br>            message.warning(&#x27;该应用已经是常用应用，不能重复添加&#x27;)<br>        &#125; else &#123;<br>            editState(draggableId)<br>        &#125;<br><br>    &#125;<br><br><br><br>&lt;DragDropContext onDragEnd=&#123;onDragEnd&#125; key=&#x27;DragDropContext&#x27;&gt;<br>                    &lt;Droppable droppableId=&quot;部分应用&quot; direction=&quot;horizontal&quot;&gt;<br>                        &#123;(provided: any, snapshot: any) =&gt; (<br>                            &lt;div<br>                                className=&#x27;all_css&#x27;<br>                                &#123;...provided.droppableProps&#125;<br>                                ref=&#123;provided.innerRef&#125;<br>                                style=&#123;getMetaListStyles(snapshot.isDraggingOver)&#125;<br>                            &gt;<br>                                &lt;div style=&#123;&#123; marginTop: &#x27;<span class="hljs-number">4</span>px&#x27; &#125;&#125;&gt;&lt;strong&gt;部分应用&lt;/strong&gt;&lt;/div&gt;&lt;/div&gt;<br>                                &#123;provided.placeholder&#125;<br>                            &lt;/div&gt;<br>                        )&#125;<br>                    &lt;/Droppable&gt;<br>                    &lt;Droppable droppableId=&quot;全部应用&quot; direction=&quot;horizontal&quot;&gt;<br>                        &#123;(provided: any, snapshot: any) =&gt; (<br>                            &lt;div<br>                                className=&#x27;all_css&#x27;<br>                                &#123;...provided.droppableProps&#125;<br>                                ref=&#123;provided.innerRef&#125;<br>                                style=&#123;getMetaListStyle(snapshot.isDraggingOver)&#125;<br>                            &gt;<br>                                            &lt;Draggable<br>                                                key=&#123;Math.random()&#125; draggableId=&#123;item.id&#125; index=&#123;index&#125;&gt;<br>                                                &#123;(provided: any, snapshot: any) =&gt; (<br>                                                    &lt;div<br><br>                                                        ref=&#123;provided.innerRef&#125;<br>                                                        &#123;...provided.draggableProps&#125;<br>                                                        &#123;...provided.dragHandleProps&#125;<br>                                                        style=&#123;getMetaItemStyle(snapshot.isDragging, provided.draggableProps.style)&#125;<br>                                                    &gt;<br>                                                        &lt;div style=&#123;&#123; marginTop: &#x27;<span class="hljs-number">4</span>px&#x27; &#125;&#125;&gt;&lt;strong&gt;全部应用&lt;/strong&gt;&lt;/div&gt;<br>                                                    &lt;/div&gt;<br>                                                )&#125;<br>                                            &lt;/Draggable&gt;<br>                                &#123;provided.placeholder&#125;<br>                            &lt;/div&gt;<br>                        )&#125;<br>                    &lt;/Droppable&gt;<br>                &lt;/ProCard&gt;<br>            &lt;/DragDropContext&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd design react</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单击双击表格行</title>
    <link href="/2022/12/07/%E5%8D%95%E5%87%BB%E5%8F%8C%E5%87%BB%E8%A1%A8%E6%A0%BC%E8%A1%8C/"/>
    <url>/2022/12/07/%E5%8D%95%E5%87%BB%E5%8F%8C%E5%87%BB%E8%A1%A8%E6%A0%BC%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;ProTable&lt;any&gt;<br>   onRow=&#123;(record) =&gt; (&#123;<br>       style: &#123; cursor: <span class="hljs-string">&#x27;pointer&#x27;</span> &#125;,<br>       onClick: () =&gt; onSelectRow(record)<br>   &#125;)&#125;<br>/&gt;<br>const onSelectRow = (record) =&gt; &#123;<br>       console.log(record);<br>       setCurrentData(record)<br>       setOpen(<span class="hljs-literal">true</span>)<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd design react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当你使用了可选择的table【rowSelection】，却在操作(删除)后无法清除已选择状态</title>
    <link href="/2022/12/07/%E5%BD%93%E4%BD%A0%E4%BD%BF%E7%94%A8%E4%BA%86%E5%8F%AF%E9%80%89%E6%8B%A9%E7%9A%84table%E3%80%90rowSelection%E3%80%91%EF%BC%8C%E5%8D%B4%E5%9C%A8%E6%93%8D%E4%BD%9C(%E5%88%A0%E9%99%A4)%E5%90%8E%E6%97%A0%E6%B3%95%E6%B8%85%E9%99%A4%E5%B7%B2%E9%80%89%E6%8B%A9%E7%8A%B6%E6%80%81/"/>
    <url>/2022/12/07/%E5%BD%93%E4%BD%A0%E4%BD%BF%E7%94%A8%E4%BA%86%E5%8F%AF%E9%80%89%E6%8B%A9%E7%9A%84table%E3%80%90rowSelection%E3%80%91%EF%BC%8C%E5%8D%B4%E5%9C%A8%E6%93%8D%E4%BD%9C(%E5%88%A0%E9%99%A4)%E5%90%8E%E6%97%A0%E6%B3%95%E6%B8%85%E9%99%A4%E5%B7%B2%E9%80%89%E6%8B%A9%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">const [selectedKeys, setSelectedKeys] = useState([]);<br>const [selectRows, setSelectRows] = useState([]);<br><br>const rowSelection = &#123;<br>   selectedRowKeys: selectedKeys,<br>   onChange: (selectedRowKeys, selectedRows) =&gt; &#123;<br>     setSelectedKeys(selectedRowKeys);<br>     setSelectRows(selectedRows);<br>   &#125;,<br> &#125;;<br> <br> //删除（操作） 时清空key和row<br>  setSelectRows([])<br>  setSelectedKeys([])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd design react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态设置ant-design/icons图标</title>
    <link href="/2022/12/07/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AEant-design-icons%E5%9B%BE%E6%A0%87/"/>
    <url>/2022/12/07/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AEant-design-icons%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>在使用umijs开发后端管理系统时候，需要用到动态的icon图标，系统配置的时候只会传递icon的标签名称，比如正常的图标标签为：<code>&lt;PlusCircleFilled /&gt;</code>，系统存的是<code>PlusCircleFilled</code> string类型，我需要在页面上显示对应的图标</p><h2 id="icon-ts文件"><a href="#icon-ts文件" class="headerlink" title="icon.ts文件"></a>icon.ts文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">//1.创建一个icon.ts文件，内容如下<br>import React from <span class="hljs-string">&#x27;react&#x27;</span><br>import * as icons from <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><br>const Icon = (props: &#123; icon: string &#125;) =&gt; &#123;<br>    const &#123; icon &#125; = props;<br>    const antIcon: &#123; [key: string]: any &#125; = icons;<br>    <span class="hljs-built_in">return</span> React.createElement(antIcon[icon]);<br>&#125;;<br><span class="hljs-built_in">export</span> default Icon<br></code></pre></td></tr></table></figure><h2 id="页面中使用"><a href="#页面中使用" class="headerlink" title="页面中使用"></a>页面中使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">//2.使用<br>import Icon from <span class="hljs-string">&#x27;./icon&#x27;</span><br>&lt;Icon icon=&#123;item.icon&#125;/&gt; // item.icon为动态传入的标签名称<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd design react</tag>
      
      <tag>Umijs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd_design_react图标选择器</title>
    <link href="/2022/12/05/antd-design-react%E5%9B%BE%E6%A0%87%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2022/12/05/antd-design-react%E5%9B%BE%E6%A0%87%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="效果图片"><a href="#效果图片" class="headerlink" title="效果图片"></a>效果图片</h2><p><img src="/img/photoChoose.png" alt="图标选择器"></p><h2 id="index-ts-主页面"><a href="#index-ts-主页面" class="headerlink" title="index.ts 主页面"></a>index.ts 主页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">import * as IconsMy from <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span>; //引入全部图标<br>import styles from <span class="hljs-string">&#x27;@/utils/icon/index.less&#x27;</span>;//引入样式<br>const [iconData, setIconData] = useState&lt;any&gt;([]);//选择图标所有数据<br>const [iconValue, setIconValue] = useState&lt;string&gt;(<span class="hljs-string">&#x27;&#x27;</span>);//选择图标数据<br><br>//处理图标数据<br>    const handleIconData = () =&gt; &#123;<br>        <span class="hljs-built_in">let</span> iconArr = []<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i <span class="hljs-keyword">in</span> IconsMy) &#123;<br>            <span class="hljs-keyword">if</span> (i.includes(<span class="hljs-string">&#x27;Outlined&#x27;</span>)) &#123;<br>                iconArr.push(&#123;<br>                    value: IconsMy[i],<br>                    key: i,<br>                    state: <span class="hljs-literal">false</span><br>                &#125;)<br>            &#125;<br>        &#125;<br>        setIconData(iconArr)<br>    &#125;<br>    //显示所选择图标<br>    const icon_box = (<br>        &lt;div className=&#123;styles.icon_inner&#125;&gt;<br>            &lt;div className=&#123;styles.icon_list&#125;&gt;<br>                &#123;iconData.map((icon: any) =&gt; (<br>                    &lt;Button key=&#123;icon.key&#125; icon=&#123;&lt;icon.value /&gt;&#125; type=&#123;iconValue == icon.key ? &#x27;primary&#x27; : &#x27;default&#x27;&#125; onClick=&#123;() =&gt; &#123; setIconValue(icon.key) &#125;&#125; /&gt;<br>                ))&#125;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    );<br>    <br>    &lt;Form.Item<br>      label=<span class="hljs-string">&quot;模块图标&quot;</span><br>      name=<span class="hljs-string">&quot;moduleIcon&quot;</span><br>      style=&#123;&#123; width: <span class="hljs-string">&#x27;752px&#x27;</span>, marginLeft: <span class="hljs-string">&#x27;4px&#x27;</span> &#125;&#125;<br>       &gt;&lt;Popover<br>             content=&#123;icon_box&#125;<br>           &gt;<br>        &lt;Input placeholder=<span class="hljs-string">&#x27;请选择图标&#x27;</span> value=&#123;iconValue&#125; /&gt;<br>     &lt;/Popover&gt;<br>    &lt;/Form.Item&gt;<br></code></pre></td></tr></table></figure><h2 id="index-less-样式页面"><a href="#index-less-样式页面" class="headerlink" title="index.less 样式页面"></a>index.less 样式页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">@import <span class="hljs-string">&#x27;~antd/lib/style/themes/default.less&#x27;</span>;<br>:global(.ant-btn-icon-only) &#123;<br>    // padding: 8px;<br>    margin: 8px 0 0 8px;<br>&#125;<br><br>:global(.ant-input-disabled) &#123;<br>    background-color: <span class="hljs-comment">#FFF;</span><br>    cursor: pointer;<br>    color: rgba(0, 0, 0, 0.65);<br>&#125;<br><br>:global(.ant-input-disabled:hover) &#123;<br>    border-color: <span class="hljs-comment">#40a9ff;</span><br>&#125;<br><br>.icon_inner &#123;<br>    // width: 478px;<br>    max-height: 258px;<br>    overflow-x: hidden;<br>    overflow-y: auto;<br>&#125;<br><br>.icon_list &#123;<br>    width: 320px;<br>    padding: 0;<br>    margin: -8px 0 0 -8px;<br>&#125;<br><br>::-webkit-scrollbar &#123;<br>    width: 0px;<br>    height: 1px;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd design react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全屏模式下ESC键 (react)</title>
    <link href="/2022/12/05/%E5%85%A8%E5%B1%8F%E6%A8%A1%E5%BC%8F%E4%B8%8BESC%E9%94%AE%20(react)/"/>
    <url>/2022/12/05/%E5%85%A8%E5%B1%8F%E6%A8%A1%E5%BC%8F%E4%B8%8BESC%E9%94%AE%20(react)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">useEffect(() =&gt; &#123;<br>    //在此监听全屏模式下 esc退出/上方X号<br>    document.addEventListener(&quot;fullscreenchange&quot;, escFunction); /* Chrome, Safari and Opera */<br>  &#125;, []);<br> <br>const escFunction = (e) =&gt; &#123;<br>    if (e.srcElement.scrollWidth != <span class="hljs-number">1920</span>) &#123;<br>      //可在此执行相应操作<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阻止事件冒泡</title>
    <link href="/2022/12/05/%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
    <url>/2022/12/05/%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">e.stopPropagation();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连续调用location.href下载文件只有最后一个生效</title>
    <link href="/2022/12/05/%E8%BF%9E%E7%BB%AD%E8%B0%83%E7%94%A8location-href%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%8F%AA%E6%9C%89%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E7%94%9F%E6%95%88/"/>
    <url>/2022/12/05/%E8%BF%9E%E7%BB%AD%E8%B0%83%E7%94%A8location-href%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%8F%AA%E6%9C%89%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i of this.exportArr) &#123;<br>          <span class="hljs-built_in">let</span> iframe = document.createElement(<span class="hljs-string">&quot;IFRAME&quot;</span>);<br>          iframe.style.display = <span class="hljs-string">&quot;none&quot;</span>;<br>          iframe.style.height = 0;<br>          iframe.setAttribute(<span class="hljs-string">&quot;src&quot;</span>, `<span class="hljs-variable">$&#123;this.$url + &#x27;/console/markup/handler/exportTxt?id=&#x27; + i.id&#125;</span>`);<br>          document.body.appendChild(iframe);<br>          setTimeout(() =&gt; &#123;<br>            iframe.parentNode.removeChild(iframe);<br>            iframe = null;<br>          &#125;, <span class="hljs-number">200</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h2><ul><li>使用a标签单独下载没有问题</li><li>连续调用下载就不可行了</li></ul>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算距离当前时间多长时间</title>
    <link href="/2022/12/05/%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E5%A4%9A%E9%95%BF%E6%97%B6%E9%97%B4/"/>
    <url>/2022/12/05/%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E5%A4%9A%E9%95%BF%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> computedTime(old)&#123;       //传入之前的时间  时间格式为(YY-MM-DD HH:MM:SS)<br>      var returnText=<span class="hljs-string">&quot;&quot;</span>;<br>      var nowDate=new Date().getTime();   //当前时间<br>      var setDate=new Date(old).getTime();<br>      var <span class="hljs-built_in">times</span>=Math.floor((nowDate-setDate)/<span class="hljs-number">1000</span>);<br>      if(times &gt; <span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">365</span>)&#123;<br>        returnText=Math.floor(times / (<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">365</span>))+<span class="hljs-string">&quot;年前&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">times</span> &gt; 60*60*24*30)&#123;<br>        returnText=Math.floor(<span class="hljs-built_in">times</span> / (60*60*24*30))+<span class="hljs-string">&quot;个月前&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">times</span> &gt; 60*60*24)&#123;<br>        returnText=Math.floor(<span class="hljs-built_in">times</span> / (60*60*24))+<span class="hljs-string">&quot;天前&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">times</span> &gt; 60*60)&#123;<br>        returnText=Math.floor(<span class="hljs-built_in">times</span> / (60*60))+<span class="hljs-string">&quot;小时前&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">times</span> &gt; 60)&#123;<br>        returnText=Math.floor(<span class="hljs-built_in">times</span> / (60))+<span class="hljs-string">&quot;分钟前&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">times</span> &gt; 0)&#123;<br>        returnText=Math.floor(<span class="hljs-built_in">times</span> / 1)+<span class="hljs-string">&quot;秒前&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        returnText=<span class="hljs-string">&quot;系统错误,必须传入当前时间之前的数值&quot;</span>;<br>      &#125;<br>      <span class="hljs-built_in">return</span> returnText;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise.all 多请求合并处理</title>
    <link href="/2022/12/05/Promise.all%20%E5%A4%9A%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6%E5%A4%84%E7%90%86/"/>
    <url>/2022/12/05/Promise.all%20%E5%A4%9A%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">postSingle(item)=&gt;&#123;<br>    //单个请求<br>&#125;<br>const queue: any = [];<br><span class="hljs-keyword">if</span> (selectedRows &amp;&amp; selectedRows.length &gt; 0) &#123;<br>    selectedRows.forEach((item, index) =&gt; &#123;<br>        // 把所有请求接口放到一个数组中<br>        queue.push(postSingle(item)); <br>    &#125;);<br>&#125;<br><br>// 把数组放到promise.all中<br>Promise.all(queue).<span class="hljs-keyword">then</span>((result) =&gt; &#123; <br>    //结果返回一个数组 [undefined,undefined]<br>    console.log(result);<br>    setTimeout(() =&gt; &#123;<br>        //执行成功时提示或操作<br>    &#125;, <span class="hljs-number">200</span>);<br>&#125;).catch((error) =&gt; &#123;<br>    //执行失败时提示或操作<br>    console.log(error); <br>&#125;);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>txt文件转换成字符串文本</title>
    <link href="/2022/12/05/txt%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%87%E6%9C%AC/"/>
    <url>/2022/12/05/txt%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">const text = <span class="hljs-string">&quot;&quot;</span><br>const file = &#123;&#125; //文件对象<br><span class="hljs-keyword">if</span> (window.FileReader) &#123;<br>     const reader = new FileReader();<br>     reader.onloadend = <span class="hljs-keyword">function</span> (evt: any) &#123;<br>         text = evt.target.result<br>         // 包含中文内容用gbk编码<br>         reader.readAsText(file, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>     &#125;)<br>&#125;<br><br>setTimeout(() =&gt; &#123;<br>      //打印text结果需要延时打印 <br>      console.log(text)<br>&#125;, <span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
